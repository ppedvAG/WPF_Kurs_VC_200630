<Window x:Class="MVVM_Bsp.View.StartView"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:vm="clr-namespace:MVVM_Bsp.ViewModel"
        xmlns:local="clr-namespace:MVVM_Bsp.View"
        mc:Ignorable="d"
        Title="Personen Datenbank" Height="167.134" Width="436.137"
        Style="{StaticResource Sty_Wnd_Main}" x:Name="Wnd_StartView">

    <!--Im View-Teil von MVVM-Projekten werden die Fenster per XAML definiert. Diese Klassen dürfen keinen Code-Behind
    besitzen. Diese Aufgabe wird von dem entsprechenden ViewModel übernommen, welches als DataContext des Views gesetzt
    wird. Dies geschieht hier, im ersten Fenster des Programms, inner halb des XAML-Codes.-->
    <Window.DataContext>
        <vm:StartViewModel/>
    </Window.DataContext>

    <!--Die Eigenschaften werden über Kurzbindungen an den DataContext (das ViewModel) gebunden.-->
    <StackPanel Margin="10">

        <TextBlock Text="Personen Datenbank" FontSize="30" HorizontalAlignment="Center"/>

        <WrapPanel Margin="10" HorizontalAlignment="Center">
            <Button Content="Lade Db" Command="{Binding LadeDbCmd}"/>
            <!--Das OeffneDbCmd bekommt über den Parameter das aktuelle View mit übergeben, damit dessen
            Close-Methode ausgeführt werden kann.-->
            <Button Content="Öffne Db" Command="{Binding OeffneDbCmd}"
                    CommandParameter="{Binding ElementName=Wnd_StartView}"/>
        </WrapPanel>

        <WrapPanel HorizontalAlignment="Center">
            <TextBlock Text="Es wurden "/>
            <TextBlock Text="{Binding AnzahlPersonen}"/>
            <TextBlock Text=" Personen geladen."/>
        </WrapPanel>

    </StackPanel>
</Window>

